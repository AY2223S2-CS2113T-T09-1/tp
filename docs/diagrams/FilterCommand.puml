@startuml
participant ":FilterCommand" as FilterCommand
participant ":ArrayList" as ArrayList
participant ":UserData" as UserData
participant ":FinancialStatement" as FinancialStatement

participant ":ViewResult" as ViewResult


[-> FilterCommand : execute()
activate FilterCommand

'FilterCommand -> ArrayList : ArrayList()
'ArrayList --> FilterCommand : :filteredList
'FilterCommand -> ArrayList : ArrayList()
'ArrayList --> FilterCommand : :statementIndex
'FilterCommand -> ArrayList : ArrayList()
'ArrayList --> FilterCommand : :listToFilter
'FilterCommand -> ArrayList : ArrayList()
'ArrayList --> FilterCommand : :listToFilterStatementIndex

loop filterFlagAndField.size()
    alt equals "-d"
'        FilterCommand -> FilterCommand : filterByDescriptionFirstFlag()
'        activate FilterCommand
'        FilterCommand -> UserData :getStatementCount()
'        activate UserData
'        UserData -> FilterCommand :statementCount
'        deactivate UserData
'
'        loop statementCount
'            FilterCommand -> UserData : getStatement()
'            activate UserData
'            UserData -> FinancialStatement : getDescription
'            activate FinancialStatement
'            FinancialStatement -> UserData : String
'            deactivate FinancialStatement
'            UserData -> FilterCommand : FinancialStatement
'            deactivate UserData
'
'            FilterCommand -> FilterCommand : filterFlagAndField.get()
'            activate FilterCommand
'            FilterCommand -> FilterCommand : description
'            deactivate FilterCommand
'
'            opt FinancialStatement contains description
'                FilterCommand -> FilterCommand : add:filteredList
'                FilterCommand -> FilterCommand : add:FinancialStatement
'            end
'            deactivate FilterCommand
'        end
    else equals "-c"
        alt isFirstFlag
            FilterCommand -> FilterCommand : filterByCategoryFirstFlag()
            activate FilterCommand
            FilterCommand -> UserData :getStatementCount()
            activate UserData
            UserData -> FilterCommand :statementCount : int
            deactivate UserData

            loop statementCount
                FilterCommand -> UserData : getStatement()
                activate UserData
                UserData -> FinancialStatement : getCategory()
                activate FinancialStatement
                FinancialStatement -> UserData : :String
                deactivate FinancialStatement
                UserData -> FilterCommand : :FinancialStatement
                deactivate UserData

                FilterCommand -> FilterCommand : filterFlagAndField.get()
                activate FilterCommand
                FilterCommand -> FilterCommand : category : String
                deactivate FilterCommand

                opt financialStatement contains category
                    FilterCommand -> FilterCommand : add(financialStatement :FinancialStatement)
                    FilterCommand -> FilterCommand : add(statementIndex : int)
                end
                deactivate FilterCommand
        end
'        else
'            FilterCommand -> FilterCommand : filterByCategory()
'            activate FilterCommand
'            FilterCommand -> UserData :getStatementCount()
'            activate UserData
'            UserData -> FilterCommand :statementCount
'            deactivate UserData
'
'            loop statementCount
'                FilterCommand -> UserData : getStatement()
'                activate UserData
'                UserData -> FinancialStatement : getCategory
'                activate FinancialStatement
'                FinancialStatement -> UserData : category
'                deactivate FinancialStatement
'                UserData -> FilterCommand : FinancialStatement
'                deactivate UserData
'
'                FilterCommand -> FilterCommand : filterFlagAndField.get()
'                activate FilterCommand
'                FilterCommand -> FilterCommand : category
'                deactivate FilterCommand
'
'                opt FinancialStatement contains description
'                    FilterCommand -> FilterCommand : add:filteredList
'                    FilterCommand -> FilterCommand : add:FinancialStatement
'                end
'                deactivate FilterCommand
'        end
    end
    else equals "-date"

    else equals "-in"

    else equals "-out"

FilterCommand -> ViewResult : printItemsInList(listToFilterStatementIndex)
activate ViewResult
ViewResult -> :Print to user
deactivate ViewResult
end

[<--FilterCommand : : CommandResult
deactivate FilterCommand

@enduml